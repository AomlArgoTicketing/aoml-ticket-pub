name: Sync Public Issues to Private Repo

on:
  issues:
    types: [opened, labeled]  # ‚úÖ Runs on issue creation and when labels are added

jobs:
  sync_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Latest Issue Data (Retry for Labels)
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_SECRET }}
          script: |
            async function fetchIssueWithRetries(owner, repo, issue_number, retries = 5, delay = 2000) {
              for (let attempt = 1; attempt <= retries; attempt++) {
                const { data: latestIssue } = await github.rest.issues.get({
                  owner,
                  repo,
                  issue_number
                });

                const labels = latestIssue.labels.map(label => label.name);
                console.log(`üõ† Attempt ${attempt}: Extracted Labels:`, labels);

                if (labels.length > 0) {
                  return labels;  // ‚úÖ Labels found, return them
                }

                console.log(`‚ö† Labels not detected, retrying in ${delay / 1000} seconds...`);
                await new Promise(resolve => setTimeout(resolve, delay));  // ‚è≥ Wait before retrying
              }
              return [];  // ‚ùå No labels found after retries
            }

            async function checkDuplicateIssue(owner, repo, issue_number) {
              const { data: existingIssues } = await github.rest.issues.listForRepo({
                owner,
                repo,
                state: "open",
                per_page: 100
              });

              return existingIssues.some(issue => issue.title.includes(`[INTERNAL #${issue_number}]`));
            }

            const issueNumber = context.payload.issue.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;

            console.log(`üîç Checking for existing issue in private repo: Public Issue #${issueNumber}`);

            // ‚úÖ Check if the issue already exists in the private repo
            const exists = await checkDuplicateIssue('TicketTesting77', 'aoml-internal-tracking', issueNumber);

            if (exists) {
              console.log(`‚ö† Issue #${issueNumber} already exists in private repo. Skipping creation.`);
              return;  // ‚ùå Exit script to prevent duplication
            }

            // ‚úÖ Fetch issue data with retries
            const labels = await fetchIssueWithRetries(repoOwner, repoName, issueNumber);

            // Ensure "Synced from Public" label is always included
            if (!labels.includes("Synced from Public")) {
              labels.push("Synced from Public");
            }

            // ‚úÖ Replace [PUBLIC #N] with [INTERNAL #N] in title
            const newTitle = context.payload.issue.title.replace(/\[PUBLIC #(\d+)\]/, `[INTERNAL #$1]`);

            // ‚úÖ Create issue in private repo (Only if it doesn't exist)
            const createdIssue = await github.rest.issues.create({
              owner: 'TicketTesting77',
              repo: 'aoml-internal-tracking',
              title: newTitle,
              body: `### üîó Linked Public Issue: [View Issue](${context.payload.issue.html_url})\n\n---\n${context.payload.issue.body}`,
              labels: labels
            });

            console.log("‚úÖ Issue Created in Private Repo:", createdIssue.data.number);
            console.log("‚úÖ Labels Applied:", labels);
